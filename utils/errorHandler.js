const httpStatusText = require('./httpStatusText');

// Custom Error Class
class AppError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
        this.status = `${statusCode}`.startsWith('4') ? httpStatusText.FAIL : httpStatusText.ERROR;
        this.isOperational = true;

        Error.captureStackTrace(this, this.constructor);
    }
}

// MongoDB Validation Error Handler
const handleValidationErrorDB = (err) => {
    const errors = Object.values(err.errors).map(el => el.message);
    const message = `╪и┘К╪з┘Ж╪з╪к ╪║┘К╪▒ ╪╡╪н┘К╪н╪й: ${errors.join('. ')}`;
    return new AppError(message, 400);
};

// MongoDB Duplicate Key Error Handler
const handleDuplicateFieldsDB = (err) => {
    const value = err.errmsg ? err.errmsg.match(/(["'])(\\?.)*?\1/)[0] : '┘В┘К┘Е╪й ┘Е┘Г╪▒╪▒╪й';
    const message = `┘З╪░┘З ╪з┘Д┘В┘К┘Е╪й ┘Е┘И╪м┘И╪п╪й ┘Е╪│╪и┘В╪з┘Л: ${value}. ┘К╪▒╪м┘Й ╪з╪│╪к╪о╪п╪з┘Е ┘В┘К┘Е╪й ╪г╪о╪▒┘Й!`;
    return new AppError(message, 400);
};

// MongoDB Cast Error Handler
const handleCastErrorDB = (err) => {
    const message = `┘Е╪╣╪▒┘Б ╪║┘К╪▒ ╪╡╪н┘К╪н: ${err.value}`;
    return new AppError(message, 400);
};

// JWT Error Handlers
const handleJWTError = () =>
    new AppError('╪▒┘Е╪▓ ╪з┘Д╪к┘И╪л┘К┘В ╪║┘К╪▒ ╪╡╪н┘К╪н. ┘К╪▒╪м┘Й ╪к╪│╪м┘К┘Д ╪з┘Д╪п╪о┘И┘Д ┘Е╪▒╪й ╪г╪о╪▒┘Й!', 401);

const handleJWTExpiredError = () =>
    new AppError('╪з┘Ж╪к┘З╪к ╪╡┘Д╪з╪н┘К╪й ╪▒┘Е╪▓ ╪з┘Д╪к┘И╪л┘К┘В. ┘К╪▒╪м┘Й ╪к╪│╪м┘К┘Д ╪з┘Д╪п╪о┘И┘Д ┘Е╪▒╪й ╪г╪о╪▒┘Й!', 401);

// Send Error in Development
const sendErrorDev = (err, res) => {
    res.status(err.statusCode).json({
        status: err.status,
        error: err,
        message: err.message,
        stack: err.stack
    });
};

// Send Error in Production
const sendErrorProd = (err, res) => {
    // Operational, trusted error: send message to client
    if (err.isOperational) {
        res.status(err.statusCode).json({
            status: err.status,
            message: err.message
        });
    } else {
        // Programming or other unknown error: don't leak error details
        console.error('ERROR ЁЯТе', err);
        res.status(500).json({
            status: httpStatusText.ERROR,
            message: '╪н╪п╪л ╪о╪╖╪г ┘Е╪з!'
        });
    }
};

// Global Error Handler Middleware
const globalErrorHandler = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.status = err.status || httpStatusText.ERROR;

    if (process.env.NODE_ENV === 'development') {
        sendErrorDev(err, res);
    } else {
        let error = { ...err };
        error.message = err.message;

        // Handle specific MongoDB errors
        if (error.name === 'CastError') error = handleCastErrorDB(error);
        if (error.code === 11000) error = handleDuplicateFieldsDB(error);
        if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
        if (error.name === 'JsonWebTokenError') error = handleJWTError();
        if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();

        sendErrorProd(error, res);
    }
};

// Async Error Catcher
const catchAsync = (fn) => {
    return (req, res, next) => {
        fn(req, res, next).catch(next);
    };
};

// Validation Error Messages in Arabic
const validationMessages = {
    required: '┘З╪░╪з ╪з┘Д╪н┘В┘Д ┘Е╪╖┘Д┘И╪и',
    email: '┘К╪▒╪м┘Й ╪е╪п╪о╪з┘Д ╪и╪▒┘К╪п ╪е┘Д┘Г╪к╪▒┘И┘Ж┘К ╪╡╪н┘К╪н',
    minlength: '┘К╪м╪и ╪г┘Ж ┘К┘Г┘И┘Ж ╪з┘Д╪н╪п ╪з┘Д╪г╪п┘Ж┘Й {MINLENGTH} ╪г╪н╪▒┘Б',
    maxlength: '┘К╪м╪и ╪г┘Ж ┘Д╪з ┘К╪к╪м╪з┘И╪▓ {MAXLENGTH} ╪н╪▒┘Б',
    min: '┘К╪м╪и ╪г┘Ж ╪к┘Г┘И┘Ж ╪з┘Д┘В┘К┘Е╪й ╪г┘Г╪и╪▒ ┘Е┘Ж ╪г┘И ╪к╪│╪з┘И┘К {MIN}',
    max: '┘К╪м╪и ╪г┘Ж ╪к┘Г┘И┘Ж ╪з┘Д┘В┘К┘Е╪й ╪г┘В┘Д ┘Е┘Ж ╪г┘И ╪к╪│╪з┘И┘К {MAX}',
    unique: '┘З╪░┘З ╪з┘Д┘В┘К┘Е╪й ┘Е┘И╪м┘И╪п╪й ┘Е╪│╪и┘В╪з┘Л',
    enum: '╪з┘Д┘В┘К┘Е╪й ╪з┘Д┘Е╪п╪о┘Д╪й ╪║┘К╪▒ ┘Е╪│┘Е┘И╪н╪й',
    match: '╪к┘Ж╪│┘К┘В ╪з┘Д╪и┘К╪з┘Ж╪з╪к ╪║┘К╪▒ ╪╡╪н┘К╪н'
};

module.exports = {
    AppError,
    globalErrorHandler,
    catchAsync,
    validationMessages
};
